name: Deploy to AWS Lambda

on:
  push:
    branches:
      - main

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

env:
  AWS_REGION: ap-southeast-2
  PYTHON_VERSION: "3.12"
  NODE_VERSION: "20"

jobs:
  test:
    name: Run Tests
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install pytest pytest-cov pytest-mock moto[lambda,apigateway]

      - name: Run tests
        run: |
          pytest tests/ -v --cov=src --cov-report=term-missing

  deploy:
    name: Deploy CDK Stack
    runs-on: ubuntu-latest
    needs: test

    steps:
      - name: Free up disk space
        run: |
          echo "Disk space before cleanup:"
          df -h

          # Remove unnecessary pre-installed tools
          sudo rm -rf /usr/share/dotnet
          sudo rm -rf /usr/local/lib/android
          sudo rm -rf /opt/ghc
          sudo rm -rf /opt/hostedtoolcache/CodeQL
          sudo rm -rf "$AGENT_TOOLSDIRECTORY"

          # Clean Docker system
          docker system prune -af --volumes

          echo "Disk space after cleanup:"
          df -h

      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: '**/package-lock.json'

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        with:
          driver-opts: |
            image=moby/buildkit:latest
            network=host

      - name: Expose GitHub Runtime for Docker
        uses: crazy-max/ghaction-github-runtime@v3

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Install Python dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Install CDK dependencies
        working-directory: ./infrastructure
        run: |
          pip install -r requirements.txt

      - name: Cache CDK assets
        uses: actions/cache@v4
        with:
          path: cdk.out
          key: cdk-out-${{ runner.os }}-${{ hashFiles('**/requirements.txt', 'src/**', 'Dockerfile', 'infrastructure/**') }}
          restore-keys: |
            cdk-out-${{ runner.os }}-

      - name: CDK Synth
        env:
          BUILDKIT_INLINE_CACHE: "1"
          DOCKER_BUILDKIT: "1"
        run: |
          npx cdk synth

      - name: CDK Deploy
        env:
          BUILDKIT_INLINE_CACHE: "1"
          DOCKER_BUILDKIT: "1"
        run: |
          npx cdk deploy --require-approval never --all

      - name: Get deployment outputs
        id: outputs
        run: |
          API_ENDPOINT=$(aws cloudformation describe-stacks \
            --stack-name text-analysis-prod \
            --query 'Stacks[0].Outputs[?OutputKey==`AnalyzeEndpoint`].OutputValue' \
            --output text \
            --region ${{ env.AWS_REGION }})

          LAMBDA_NAME=$(aws cloudformation describe-stacks \
            --stack-name text-analysis-prod \
            --query 'Stacks[0].Outputs[?OutputKey==`LambdaFunctionName`].OutputValue' \
            --output text \
            --region ${{ env.AWS_REGION }})

          echo "api_endpoint=$API_ENDPOINT" >> $GITHUB_OUTPUT
          echo "lambda_name=$LAMBDA_NAME" >> $GITHUB_OUTPUT

      - name: Print deployment info
        run: |
          echo "âœ… Deployment successful!"
          echo "API Endpoint: ${{ steps.outputs.outputs.api_endpoint }}"
          echo "Lambda Function: ${{ steps.outputs.outputs.lambda_name }}"

      - name: Test API endpoint
        run: |
          echo "Testing deployed API endpoint..."
          curl -X POST ${{ steps.outputs.outputs.api_endpoint }} \
            -H "Content-Type: application/json" \
            -d '{
              "baseline": [
                {"sentence": "Great product!", "id": "1"},
                {"sentence": "Terrible experience", "id": "2"}
              ],
              "query": "overview"
            }' \
            --fail \
            --show-error \
            --silent \
            | jq '.summary'
