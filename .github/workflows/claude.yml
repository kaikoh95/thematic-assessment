name: Claude Code

on:
  issue_comment:
    types: [created]
  pull_request_review_comment:
    types: [created]
  issues:
    types: [opened, assigned]
  pull_request_review:
    types: [submitted]

jobs:
  claude:
    if: |
      (github.event_name == 'issue_comment' && contains(github.event.comment.body, '@claude')) ||
      (github.event_name == 'pull_request_review_comment' && contains(github.event.comment.body, '@claude')) ||
      (github.event_name == 'pull_request_review' && contains(github.event.review.body, '@claude')) ||
      (github.event_name == 'issues' && (contains(github.event.issue.body, '@claude') || contains(github.event.issue.title, '@claude')))
    runs-on: ubuntu-latest
    permissions:
      contents: read
      pull-requests: read
      issues: read
      id-token: write
      actions: read # Required for Claude to read CI results on PRs
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 1

      - name: Setup MCP Configuration
        uses: ./.github/actions/setup-mcp-config
        with:
          firecrawl_api_key: ${{ secrets.FIRECRAWL_API_KEY }}
          context7_api_key: ${{ secrets.CONTEXT7_API_KEY }}

      - name: Run Claude Code
        id: claude
        uses: anthropics/claude-code-action@v1
        with:
          claude_code_oauth_token: ${{ secrets.CLAUDE_CODE_OAUTH_TOKEN }}
          # or: claude-api-key: ${{ secrets.CLAUDE_API_KEY }}
          # When track_progress is enabled:
          # - Creates a tracking comment with progress checkboxes
          # - Includes all PR context (comments, attachments, images)
          # - Updates progress as the review proceeds
          # - Marks as completed when done
          track_progress: true
          # This is an optional setting that allows Claude to read CI results on PRs
          additional_permissions: |
            actions: read
          prompt: |
            REPO: ${{ github.repository }}
            PR NUMBER: ${{ github.event.pull_request.number }}

            You are acting as the Principal Software Engineer Reviewer for a high-velocity, lean startup. Your mandate is to enforce the "Pragmatic Quality" framework: balance rigorous engineering standards with development speed to ensure the codebase scales effectively.

            When the user invokes you to handle a task, you must follow the following instructions:

            ### Important Instructions

            1. First create a new git branch and name it based on the task. You should always use this branch when developing the task.
            1a. You should always base your branch on the latest main branch unless the user explicitly instructs you to do otherwise from another branch.
            2. You are given a set of allowed tools but if you need to use any other tools or MCPs that you plan to use, you MUST first auto-approve them yourself for this session.
            3. When using any tool or MCP, you must invoke parallel agent to research the relevant knowledge.
            4. Use context7 mcp to fetch latest documentations for any reference. If you cannot find the documentation, try web_search or web_fetch tool, then fallback to using firecrawl mcp.
            5. Reference existing documentations in the codebase for understanding what has been done before and follow existing code patterns and conventions.
            6. Before starting the task, you should always ultrathink and understand deeply what is required for the task then write down your thoughts in a markdown file in the .claude/docs/user-invocations/[task-name]/BRIEF.md folder.
            7. Once created, you should run the command `/BMad:agents:bmad-orchestrator *workflow brownfield-fullstack` to kick off the task. Tell the orchestrator and any subsequent agents to go YOLO mode for developing the task and to skip confirmations.
            8. Follow the workflow that has been initiated step by step. Tell the orchestrator and any subsequent agents that all documentations to be created must be located in the .claude/docs/user-invocations/[task-name]/ folder.
            8a. You may also reference what has been documented in @.bmad-core/working-in-the-brownfield.md and @.bmad-core/enhanced-ide-development-workflow.md to ensure you are following the best practices for implementing the task.
            9. Create a new PR when you are done with the task and ensure the PR is targeted back to the main branch or the branch that the user has specified.

          # See https://github.com/anthropics/claude-code-action/blob/main/docs/usage.md
          # or https://docs.anthropic.com/en/docs/claude-code/sdk#command-line for available options
          claude_args: '--model claude-sonnet-4-5-20250929 --allowed-tools "mcp__firecrawl__firecrawl_extract,mcp__shadcn__get_audit_checklist,mcp__shadcn__get_add_command_for_items,mcp__shadcn__get_item_examples_from_registries,mcp__shadcn__view_items_in_registries,mcp__shadcn__search_items_in_registries,mcp__shadcn__get_project_registries,mcp__shadcn__list_items_in_registries,web_fetch,web_search,mcp__firecrawl__firecrawl_check_crawl_status,mcp__firecrawl__firecrawl_crawl,mcp__firecrawl__firecrawl_search,mcp__firecrawl__firecrawl_map,mcp__firecrawl__firecrawl_scrape,mcp__context7__resolve-library-id,mcp__context7__get-library-docs,mcp__github_inline_comment__create_inline_comment,Bash(gh issue view:*),Bash(gh issue develop:*),Bash(gh search:*),Bash(gh issue list:*),Bash(gh pr comment:*),Bash(gh pr diff:*),Bash(gh pr view:*),Bash(gh pr list:*),Bash(gh pr create:*),Bash(gh pr checkout:*)" --mcp-config /tmp/mcp-config.json'
